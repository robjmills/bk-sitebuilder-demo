<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace basekit\SiteBuilder;

/**
 * SiteBuilder
 * 
 * @package basekit\SiteBuilder
 * @access public
 */
class SiteBuilder
{
	public const SERVERS = [
		'http://localhost:3000',
	];
  		
	private SDKConfiguration $sdkConfiguration;

	/**
	 * Returns a new instance of the SDK builder used to configure and create the SDK instance.
	 * 
	 * @return SiteBuilderBuilder
	 */
	public static function builder(): SiteBuilderBuilder
	{
		return new SiteBuilderBuilder();
	}

	/**
	 * @param SDKConfiguration $sdkConfiguration
	 */
	public function __construct(SDKConfiguration $sdkConfiguration)
	{
		$this->sdkConfiguration = $sdkConfiguration;
	}
	
    /**
     * Delete section
     * 
     * Delete a section, and its child widgets, by the section's sectionRef
     * 
     * @param \basekit\SiteBuilder\Models\Operations\DeleteSitesSiteRefSectionsUniqueIdRequest $request
     * @return \basekit\SiteBuilder\Models\Operations\DeleteSitesSiteRefSectionsUniqueIdResponse
     */
	public function deleteSitesSiteRefSectionsUniqueId(
        \basekit\SiteBuilder\Models\Operations\DeleteSitesSiteRefSectionsUniqueIdRequest $request,
    ): \basekit\SiteBuilder\Models\Operations\DeleteSitesSiteRefSectionsUniqueIdResponse
    {
        $baseUrl = $this->sdkConfiguration->getServerUrl();
        $url = Utils\Utils::generateUrl($baseUrl, '/sites/{siteRef}/pages/{pageRef}/sections/{sectionRef}', \basekit\SiteBuilder\Models\Operations\DeleteSitesSiteRefSectionsUniqueIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options['headers']['Accept'] = '*/*';
        $options['headers']['user-agent'] = sprintf('speakeasy-sdk/%s %s %s %s', $this->sdkConfiguration->language, $this->sdkConfiguration->sdkVersion, $this->sdkConfiguration->genVersion, $this->sdkConfiguration->openapiDocVersion);
        
        $httpResponse = $this->sdkConfiguration->defaultClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \basekit\SiteBuilder\Models\Operations\DeleteSitesSiteRefSectionsUniqueIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * Get sections
     * 
     * Retrieve a list of sections on a given page
     * 
     * @param \basekit\SiteBuilder\Models\Operations\GetSitesSiteRefSectionsRequest $request
     * @return \basekit\SiteBuilder\Models\Operations\GetSitesSiteRefSectionsResponse
     */
	public function getSitesSiteRefSections(
        \basekit\SiteBuilder\Models\Operations\GetSitesSiteRefSectionsRequest $request,
    ): \basekit\SiteBuilder\Models\Operations\GetSitesSiteRefSectionsResponse
    {
        $baseUrl = $this->sdkConfiguration->getServerUrl();
        $url = Utils\Utils::generateUrl($baseUrl, '/sites/{siteRef}/pages/{pageRef}/sections', \basekit\SiteBuilder\Models\Operations\GetSitesSiteRefSectionsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['user-agent'] = sprintf('speakeasy-sdk/%s %s %s %s', $this->sdkConfiguration->language, $this->sdkConfiguration->sdkVersion, $this->sdkConfiguration->genVersion, $this->sdkConfiguration->openapiDocVersion);
        
        $httpResponse = $this->sdkConfiguration->defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \basekit\SiteBuilder\Models\Operations\GetSitesSiteRefSectionsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getSitesSiteRefSections200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'basekit\SiteBuilder\Models\Operations\GetSitesSiteRefSections200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Create new section
     * 
     * Add a section to a given site page
     * 
     * @param \basekit\SiteBuilder\Models\Operations\PostSitesSiteRefSectionsRequest $request
     * @return \basekit\SiteBuilder\Models\Operations\PostSitesSiteRefSectionsResponse
     */
	public function postSitesSiteRefSections(
        \basekit\SiteBuilder\Models\Operations\PostSitesSiteRefSectionsRequest $request,
    ): \basekit\SiteBuilder\Models\Operations\PostSitesSiteRefSectionsResponse
    {
        $baseUrl = $this->sdkConfiguration->getServerUrl();
        $url = Utils\Utils::generateUrl($baseUrl, '/sites/{siteRef}/pages/{pageRef}/sections', \basekit\SiteBuilder\Models\Operations\PostSitesSiteRefSectionsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['user-agent'] = sprintf('speakeasy-sdk/%s %s %s %s', $this->sdkConfiguration->language, $this->sdkConfiguration->sdkVersion, $this->sdkConfiguration->genVersion, $this->sdkConfiguration->openapiDocVersion);
        
        $httpResponse = $this->sdkConfiguration->defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \basekit\SiteBuilder\Models\Operations\PostSitesSiteRefSectionsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->postSitesSiteRefSections201ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'basekit\SiteBuilder\Models\Operations\PostSitesSiteRefSections201ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update widget
     * 
     * Update the data in a widget contained in a section
     * 
     * @param \basekit\SiteBuilder\Models\Operations\PutSitesSiteRefPagesPageRefSectionsSectionRefWidgetsWidgetRefRequest $request
     * @return \basekit\SiteBuilder\Models\Operations\PutSitesSiteRefPagesPageRefSectionsSectionRefWidgetsWidgetRefResponse
     */
	public function putSitesSiteRefPagesPageRefSectionsSectionRefWidgetsWidgetRef(
        \basekit\SiteBuilder\Models\Operations\PutSitesSiteRefPagesPageRefSectionsSectionRefWidgetsWidgetRefRequest $request,
    ): \basekit\SiteBuilder\Models\Operations\PutSitesSiteRefPagesPageRefSectionsSectionRefWidgetsWidgetRefResponse
    {
        $baseUrl = $this->sdkConfiguration->getServerUrl();
        $url = Utils\Utils::generateUrl($baseUrl, '/sites/{siteRef}/pages/{pageRef}/sections/{sectionRef}/widgets/{widgetRef}', \basekit\SiteBuilder\Models\Operations\PutSitesSiteRefPagesPageRefSectionsSectionRefWidgetsWidgetRefRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['user-agent'] = sprintf('speakeasy-sdk/%s %s %s %s', $this->sdkConfiguration->language, $this->sdkConfiguration->sdkVersion, $this->sdkConfiguration->genVersion, $this->sdkConfiguration->openapiDocVersion);
        
        $httpResponse = $this->sdkConfiguration->defaultClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \basekit\SiteBuilder\Models\Operations\PutSitesSiteRefPagesPageRefSectionsSectionRefWidgetsWidgetRefResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->widget = $serializer->deserialize((string)$httpResponse->getBody(), 'basekit\SiteBuilder\Models\Shared\Widget', 'json');
            }
        }

        return $response;
    }
}